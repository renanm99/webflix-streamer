'use client'

import { useEffect, useState, Suspense } from 'react'
import Player from '@/app/components/player'
import Footer from '@/app/components/footer'
import { useSearchParams, useRouter } from 'next/navigation'
import Image from 'next/image'
import { GetTVSeasonsDetailsById } from "@/../repo/tmdbApi";
import { TVSeasonDetails } from "@/../repo/models/movie";

function TVDetailsPage() {
    const searchParams = useSearchParams();
    const router = useRouter();
    const [content, setContent] = useState<TVSeasonDetails | null>(null);
    const [isLoading, setIsLoading] = useState(true);

    // Fetch the TV season details
    useEffect(() => {
        const fetchTVSeasonDetails = async () => {
            try {
                const id = parseInt(searchParams?.get('id') || '', 10);
                const tvSeasonDetails = await GetTVSeasonsDetailsById(id);
                setContent(tvSeasonDetails);
            } catch (error) {
                console.error('Error fetching TV season details:', error);
            } finally {
                setIsLoading(false);
            }
        };

        fetchTVSeasonDetails();
    }, [searchParams]);

    if (isLoading) {
        return (
            <div className="min-h-screen bg-gradient-to-b from-gray-900 to-black text-white flex items-center justify-center">
                <div className="text-center">
                    <div className="inline-block animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500 mb-4"></div>
                    <p className="text-xl">Loading content...</p>
                </div>
            </div>
        );
    }

    if (!content || !content.id) {
        return (
            <div className="min-h-screen bg-gradient-to-b from-gray-900 to-black text-white flex items-center justify-center">
                <div className="text-center p-8 bg-gray-800 rounded-lg shadow-lg max-w-md">
                    <div className="text-5xl mb-6">üé¨</div>
                    <h2 className="text-2xl font-bold mb-4">Content Not Found</h2>
                    <p className="text-gray-400 mb-6">We couldn&apos;t find what you&apos;re looking for.</p>
                    <button
                        onClick={() => router.back()}
                        className="px-6 py-3 bg-blue-600 hover:bg-blue-700 rounded-full transition-colors shadow-lg"
                    >
                        Back to Home
                    </button>
                </div>
            </div>
        );
    }

    return (
        <div className="min-h-screen bg-gradient-to-b from-gray-900 to-black text-white">
            <main className="container mx-auto px-4 py-8">
                {/* Back Button */}
                <button
                    onClick={() => router.back()}
                    className="px-6 py-3 bg-blue-600 hover:bg-blue-700 rounded-full transition-all duration-300 mb-6 shadow-md hover:shadow-lg flex items-center"
                >
                    <span className="mr-2">‚Üê</span> Back
                </button>

                {/* Content Header */}
                <div className="mb-8">
                    <h1 className="text-4xl font-bold mb-4">{content.name}</h1>
                    <p className="italic text-blue-400 mb-4">{content.overview}</p>

                    <div className="relative w-full md:w-3/4 mb-6">
                        <Image
                            alt={content.name}
                            src={`${process.env.NEXT_PUBLIC_TMDB_POSTER_URL}${content.poster_path}`}
                            width={800}
                            height={450}
                            className="rounded-xl shadow-xl hover:shadow-2xl transition-shadow duration-300 w-full"
                        />
                        <div className="absolute inset-0 bg-gradient-to-t from-black/60 to-transparent rounded-xl"></div>
                    </div>

                    <div className="flex flex-wrap gap-4 text-gray-400 text-sm">
                        <span>Release Date <strong>{content.air_date}</strong></span>
                        <span>Season <strong>{content.season_number}</strong></span>
                        <span>Vote Average <strong>{content.vote_average.toFixed(1)}</strong></span>
                    </div>
                </div>

                {/* Episodes */}
                {content.episodes && content.episodes.length > 0 && (
                    <div className="mb-8">
                        <h2 className="text-2xl font-semibold mb-4">Episodes</h2>
                        <div className="flex flex-col gap-6">
                            {content.episodes.map((episode) => (
                                <div key={episode.id} className="flex items-start gap-4">
                                    <Image
                                        src={`${process.env.NEXT_PUBLIC_TMDB_POSTER_URL}${episode.still_path}`}
                                        alt={episode.name}
                                        width={150}
                                        height={100}
                                        className="rounded-md shadow-md"
                                    />
                                    <div>
                                        <h3 className="text-lg font-bold">{episode.name}</h3>
                                        <p className="text-gray-400 text-sm">Date: {episode.air_date}</p>
                                        <p className="text-gray-300">{episode.overview}</p>
                                    </div>
                                </div>
                            ))}
                        </div>
                    </div>
                )}

                {/* Watch Now */}
                <div className="mb-10 w-full h-full">
                    <h2 className="text-2xl font-semibold mb-4">Watch Now</h2>
                    <div className="rounded-xl overflow-hidden shadow-2xl bg-black mx-auto">
                    </div>
                </div>

                <Footer />
            </main>
        </div>
    );
}

// Main component with Suspense
export default function WatchPage() {
    return (
        <Suspense fallback={
            <div className="min-h-screen bg-gradient-to-b from-gray-900 to-black text-white flex items-center justify-center">
                <div className="text-center">
                    <div className="inline-block animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500 mb-4"></div>
                    <p className="text-xl">Loading content...</p>
                </div>
            </div>
        }>
            <TVDetailsPage />
        </Suspense>
    );
}