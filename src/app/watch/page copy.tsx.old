'use client'

import { useEffect, useState, Suspense } from 'react'
import Player from '../components/player'
import Footer from '../components/footer'
import { useSearchParams, useRouter } from 'next/navigation'
import Image from 'next/image'
import { GetTVById } from "@/../repo/tmdbApi";
import { TVById } from "@/../repo/models/movie";

function WatchPageContent() {
    const searchParams = useSearchParams();
    const router = useRouter();
    const [content, setContent] = useState<TVById | null>(null);
    const [isLoading, setIsLoading] = useState(true);

    // Fetch the TV show data
    useEffect(() => {
        const fetchTVShow = async () => {
            try {
                const id = parseInt(searchParams?.get('id') || '', 10);
                const tvShow = await GetTVById(id);
                setContent(tvShow);
            } catch (error) {
                console.error('Error fetching TV show:', error);
            } finally {
                setIsLoading(false);
            }
        };

        fetchTVShow();
    }, [searchParams]);

    if (isLoading) {
        return (
            <div className="min-h-screen bg-gradient-to-b from-gray-900 to-black text-white flex items-center justify-center">
                <div className="text-center">
                    <div className="inline-block animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500 mb-4"></div>
                    <p className="text-xl">Loading content...</p>
                </div>
            </div>
        );
    }

    if (!content) {
        return (
            <div className="min-h-screen bg-gradient-to-b from-gray-900 to-black text-white flex items-center justify-center">
                <div className="text-center p-8 bg-gray-800 rounded-lg shadow-lg max-w-md">
                    <div className="text-5xl mb-6">üé¨</div>
                    <h2 className="text-2xl font-bold mb-4">Content Not Found</h2>
                    <p className="text-gray-400 mb-6">We couldn&apos;t find what you&apos;re looking for.</p>
                    <button
                        onClick={() => router.back()}
                        className="px-6 py-3 bg-blue-600 hover:bg-blue-700 rounded-full transition-colors shadow-lg"
                    >
                        Back to Home
                    </button>
                </div>
            </div>
        );
    }

    return (
        <div className="min-h-screen bg-gradient-to-b from-gray-900 to-black text-white">
            <main className="container mx-auto px-4 py-8">
                {/* Back Button */}
                <button
                    onClick={() => router.back()}
                    className="px-6 py-3 bg-blue-600 hover:bg-blue-700 rounded-full transition-all duration-300 mb-6 shadow-md hover:shadow-lg flex items-center"
                >
                    <span className="mr-2">‚Üê</span> Back
                </button>

                {/* Content Header */}
                <div className="mb-8">
                    <h1 className="text-4xl font-bold mb-4">{content.name}</h1>
                    {content.tagline && <p className="italic text-blue-400 mb-4">&quot;{content.tagline}&quot;</p>}

                    <div className="relative w-full md:w-3/4 mb-6">
                        <Image
                            alt={content.name}
                            src={`${process.env.NEXT_PUBLIC_TMDB_BACKDROP_URL}${content.backdrop_path}`}
                            width={800}
                            height={450}
                            className="rounded-xl shadow-xl hover:shadow-2xl transition-shadow duration-300 w-full"
                        />
                        <div className="absolute inset-0 bg-gradient-to-t from-black/60 to-transparent rounded-xl"></div>
                    </div>

                    <p className="text-lg text-gray-300 leading-relaxed mb-4">
                        {content.overview || "No description available for this title."}
                    </p>

                    <div className="flex flex-wrap gap-4 text-gray-400 text-sm">
                        <span>First Air Date: <strong>{content.first_air_date}</strong></span>
                        <span>Status: <strong>{content.status}</strong></span>
                        <span>Number of Seasons: <strong>{content.number_of_seasons}</strong></span>
                        <span>Number of Episodes: <strong>{content.number_of_episodes}</strong></span>
                        <span>Vote Average: <strong>{content.vote_average.toFixed(1)}</strong></span>
                        <span>Vote Count: <strong>{content.vote_count}</strong></span>
                    </div>
                </div>

                {/* Genres */}
                {content.genres && content.genres.length > 0 && (
                    <div className="mb-8">
                        <h2 className="text-2xl font-semibold mb-4">Genres</h2>
                        <div className="flex flex-wrap gap-3">
                            {content.genres.map((genre) => (
                                <span
                                    key={genre.id}
                                    className="px-4 py-2 bg-gray-800 text-gray-300 rounded-full text-sm"
                                >
                                    {genre.name}
                                </span>
                            ))}
                        </div>
                    </div>
                )}

                {/* Networks */}
                {content.networks && content.networks.length > 0 && (
                    <div className="mb-8">
                        <h2 className="text-2xl font-semibold mb-4">Networks</h2>
                        <div className="flex flex-wrap gap-4">
                            {content.networks.map((network) => (
                                <div key={network.id} className="flex items-center gap-3">
                                    {network.logo_path && (
                                        <Image
                                            src={`${process.env.NEXT_PUBLIC_TMDB_POSTER_URL}${network.logo_path}`}
                                            alt={network.name}
                                            width={50}
                                            height={50}
                                            className="rounded-md"
                                        />
                                    )}
                                    <span className="text-gray-300">{network.name}</span>
                                </div>
                            ))}
                        </div>
                    </div>
                )}

                {/* Spoken Languages */}
                {content.spoken_languages && content.spoken_languages.length > 0 && (
                    <div className="mb-8">
                        <h2 className="text-2xl font-semibold mb-4">Spoken Languages</h2>
                        <div className="flex flex-wrap gap-3">
                            {content.spoken_languages.map((language) => (
                                <span
                                    key={language.iso_639_1}
                                    className="px-4 py-2 bg-gray-800 text-gray-300 rounded-full text-sm"
                                >
                                    {language.english_name}
                                </span>
                            ))}
                        </div>
                    </div>
                )}

                {/* Seasons */}
                {content.seasons && content.seasons.length > 0 && (
                    <div className="mb-8">
                        <h2 className="text-2xl font-semibold mb-4">Seasons</h2>
                        <div className="flex flex-wrap gap-6">
                            {content.seasons.map((season) => (
                                <div key={season.id} className="flex flex-col items-center">
                                    <Image
                                        src={`${process.env.NEXT_PUBLIC_TMDB_POSTER_URL}${season.poster_path}`}
                                        alt={season.name}
                                        width={150}
                                        height={225}
                                        className="rounded-md shadow-md"
                                    />
                                    <span className="text-gray-300 mt-2">{season.name}</span>
                                </div>
                            ))}
                        </div>
                    </div>
                )}

                <Footer />
            </main>
        </div>
    );
}

// Main component with Suspense
export default function WatchPage() {
    return (
        <Suspense fallback={
            <div className="min-h-screen bg-gradient-to-b from-gray-900 to-black text-white flex items-center justify-center">
                <div className="text-center">
                    <div className="inline-block animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500 mb-4"></div>
                    <p className="text-xl">Loading content...</p>
                </div>
            </div>
        }>
            <WatchPageContent />
        </Suspense>
    );
}